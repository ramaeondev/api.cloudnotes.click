name: Deploy to AWS ECR and Lambda

on:
  push:
    branches:
      - master
  workflow_dispatch:    

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ secrets.IMAGE_TAG }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      


      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Build, Tag, and Push Docker Image        
        run: |
            set -e
            echo "Building Docker image..."
            docker build --platform=linux/arm64 -t cloudnotes-fastapi .
            echo "Tagging image..."
            docker tag cloudnotes-fastapi:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            echo "Pushing image to ECR..."
            docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            echo "Image successfully pushed!"
        

      - name: Update AWS Lambda Function
        run: |
          aws lambda update-function-code \
            --region ${{ env.AWS_REGION }} \
            --function-name ${{env.LAMBDA_FUNCTION_NAME}} \
            --image-uri ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "Lambda function updated successfully!"
