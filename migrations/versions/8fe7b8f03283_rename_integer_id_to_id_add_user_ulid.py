"""Rename integer_id to id, add user_ulid

Revision ID: 8fe7b8f03283
Revises: cbbcf6c7b1cb
Create Date: 2025-02-24 00:12:44.148341

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '8fe7b8f03283'
down_revision: Union[str, None] = 'cbbcf6c7b1cb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('user_ulid', sa.String(length=26), nullable=False))
    op.alter_column('users', 'id',
               existing_type=sa.VARCHAR(length=26),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
    op.drop_constraint('users_integer_id_key', 'users', type_='unique')
    op.create_unique_constraint(None, 'users', ['user_ulid'])
    op.drop_column('users', 'integer_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('integer_id', sa.INTEGER(), server_default=sa.text("nextval('users_integer_id_seq'::regclass)"), autoincrement=True, nullable=False))
    op.drop_constraint(None, 'users', type_='unique')
    op.create_unique_constraint('users_integer_id_key', 'users', ['integer_id'])
    op.alter_column('users', 'id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(length=26),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
    op.drop_column('users', 'user_ulid')
    # ### end Alembic commands ###
